-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Library for working with commoditized amounts and price histories
--   
--   Library for working with commoditized amounts and price histories
@package commodities
@version 0.1.0.0

module Ledger.Commodity

-- | Commodities are simply indices into a commodity info map, which
--   relates such commodities to the information known about them.
type Commodity = Key

-- | All of the information known about a commodity.
data CommodityInfo
CommodityInfo :: !Text -> !Int -> !Bool -> !Bool -> !Bool -> !Bool -> !Bool -> !Bool -> !Bool -> !Bool -> !(IntMap (Map UTCTime Rational)) -> CommodityInfo
commSymbol :: CommodityInfo -> !Text
commPrecision :: CommodityInfo -> !Int
commSuffixed :: CommodityInfo -> !Bool
commSeparated :: CommodityInfo -> !Bool
commThousands :: CommodityInfo -> !Bool
commDecimalComma :: CommodityInfo -> !Bool
commNoMarket :: CommodityInfo -> !Bool
commBuiltin :: CommodityInfo -> !Bool
commKnown :: CommodityInfo -> !Bool
commPrimary :: CommodityInfo -> !Bool
commConversions :: CommodityInfo -> !(IntMap (Map UTCTime Rational))

-- | Return a <a>CommodityInfo</a> with defaults selected for all fields.
--   It is intended that at least one field of the result will be modified
--   immediately.
defaultCommodityInfo :: CommodityInfo

-- | A commodities map, relating commodity indices to information about
--   those commodities.
data CommodityMap
CommodityMap :: IntMap CommodityInfo -> CommodityMap
commodities :: CommodityMap -> IntMap CommodityInfo

-- | Lookup a price conversion from the source commodity to the target,
--   using data from the given time or earlier. Result is Nothing if no
--   conversion can be found, or else the best conversion ratio plus the
--   time of the oldest link.
findConversion :: Commodity -> Commodity -> UTCTime -> CommodityMap -> Maybe (UTCTime, Rational)

-- | Add a price conversion in the form of a ratio between two commodities
--   at a specific point in time.
addConversion :: Commodity -> Commodity -> UTCTime -> Rational -> State CommodityMap ()

-- | This function computes an optimal (minimal distance) path through a
--   graph in a best-first fashion, starting from a given starting point.
intAStar :: (Ord c, Num c) => (Key -> IntMap c) -> (Key -> c) -> (Key -> Bool) -> Key -> Maybe [Key]

-- | This function computes an optimal (minimal distance) path through a
--   graph in a best-first fashion, starting from a given starting point.
intAStarM :: (Monad m, Ord c, Num c) => (Key -> m (IntMap c)) -> (Key -> m c) -> (Key -> m Bool) -> m Key -> m (Maybe [Key])
instance Show CommodityInfo
instance Show CommodityMap
instance (Ord c, Show c) => Show (IntAStar c)

module Ledger.Balance
noCommodity :: Commodity

-- | A value representing either zero (all zeroes are equivalent), a
--   commoditized value, or a vector space of values indexed by commodity.
data Balance a
Zero :: Balance a

-- | An uncommoditized integer
Plain :: a -> Balance a

-- | A single commoditized amount
Amount :: Commodity -> a -> Balance a

-- | A vector-space over commodities
Balance :: (IntMap a) -> Balance a
non' :: (Functor f, Profunctor p) => a -> p a (f a) -> p (Maybe a) (f (Maybe a))
instance Typeable1 Balance
instance Show a => Show (Balance a)
instance Read a => Read (Balance a)
instance Data a => Data (Balance a)
instance Apply Balance
instance Applicative Balance
instance Functor Balance
instance Additive Balance
instance Eq (Balance a)
